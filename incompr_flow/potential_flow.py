import numpy as np

def get_stream_function_s(strength, xs, ys, X, Y):
    """
    Returns the stream-function generated by a source/sink.

    Parameters
    ----------
    strength: float
        Strength of the source/sink.
    xs: float
        x-coordinate of the source (or sink).
    ys: float
        y-coordinate of the source (or sink).
    X: 2D Numpy array of floats
        x-coordinate of the mesh points.
    Y: 2D Numpy array of floats
        y-coordinate of the mesh points.

    Returns
    -------
    psi: 2D Numpy array of floats
        The stream-function.
    """
    psi = strength / (2 * np.pi) * np.arctan2((Y - ys), (X - xs))

    return psi


def get_velocity_s(strength, xs, ys, X, Y):
    """
    Returns the velocity field generated by a source/sink.

    Parameters
    ----------
    strength: float
        Strength of the source/sink.
    xs: float
        x-coordinate of the source (or sink).
    ys: float
        y-coordinate of the source (or sink).
    X: 2D Numpy array of floats
        x-coordinate of the mesh points.
    Y: 2D Numpy array of floats
        y-coordinate of the mesh points.

    Returns
    -------
    u: 2D Numpy array of floats
        x-component of the velocity vector field.
    v: 2D Numpy array of floats
        y-component of the velocity vector field.
    """
    u = strength / (2 * np.pi) * (X - xs) / ((X - xs) ** 2 + (Y - ys) ** 2)
    v = strength / (2 * np.pi) * (Y - ys) / ((X - xs) ** 2 + (Y - ys) ** 2)

    return u, v


def get_velocity_doublet(strength, xd, yd, X, Y):
    """
    Returns the velocity field generated by a doublet.

    Parameters
    ----------
    strength: float
        Strength of the doublet.
    xd: float
        x-coordinate of the doublet.
    yd: float
        y-coordinate of the doublet.
    X: 2D Numpy array of floats
        x-coordinate of the mesh points.
    Y: 2D Numpy array of floats
        y-coordinate of the mesh points.

    Returns
    -------
    u: 2D Numpy array of floats
        x-component of the velocity vector field.
    v: 2D Numpy array of floats
        y-component of the velocity vector field.
    """
    u = (- strength / (2 * np.pi) *
         ((X - xd) ** 2 - (Y - yd) ** 2) /
         ((X - xd) ** 2 + (Y - yd) ** 2) ** 2)
    v = (- strength / (2 * np.pi) *
         2 * (X - xd) * (Y - yd) /
         ((X - xd) ** 2 + (Y - yd) ** 2) ** 2)

    return u, v


def get_stream_function_doublet(strength, xd, yd, X, Y):
    """
    Returns the stream-function generated by a doublet.

    Parameters
    ----------
    strength: float
        Strength of the doublet.
    xd: float
        x-coordinate of the doublet.
    yd: float
        y-coordinate of the doublet.
    X: 2D Numpy array of floats
        x-coordinate of the mesh points.
    Y: 2D Numpy array of floats
        y-coordinate of the mesh points.

    Returns
    -------
    psi: 2D Numpy array of floats
        The stream-function.
    """
    psi = - strength / (2 * np.pi) * (Y - yd) / ((X - xd) ** 2 + (Y - yd) ** 2)

    return psi


def get_stream_function(U, alpha, X, Y):
    """
    Returns the stream-function generated by freestream.

    Parameters
    ----------
    U: float
        freestream speed
    alpha: float
        angle of attack in radians
    X: 2D Numpy array of floats
        x-coordinate of the mesh points.
    Y: 2D Numpy array of floats
        y-coordinate of the mesh points.

    Returns
    -------
    psi: 2D Numpy array of floats
        The stream-function.
    """
    psi = U * (Y * np.cos(alpha) + X * np.sin(alpha))

    return psi


def get_velocity(U, alpha, N):
    """
    Returns the velocity field generated by freestream.

    Parameters
    ----------
    U: float
        freestream speed
    alpha: float
        angle of attack in radians
    N: int
        Number of points in each direction

    Returns
    -------
    u: 2D Numpy array of floats
        x-component of the velocity vector field.
    v: 2D Numpy array of floats
        y-component of the velocity vector field.
    """
    u = U * np.cos(alpha) * np.ones((N, N), dtype=float)
    v = -1.0 * U * np.sin(alpha) * np.ones((N, N), dtype=float)

    return u, v